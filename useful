import React, { useEffect, useState } from 'react';

// Define type for a location
type Location = {
  id: string;
  latitude: number;
  longitude: number;
  status: 'visited' | 'not visited';
};

// Utility to calculate distance using Haversine formula
const getDistanceInMeters = (
  lat1: number,
  lon1: number,
  lat2: number,
  lon2: number
): number => {
  const R = 6371e3; // Radius of Earth in meters
  const toRadians = (deg: number) => (deg * Math.PI) / 180;

  const φ1 = toRadians(lat1);
  const φ2 = toRadians(lat2);
  const Δφ = toRadians(lat2 - lat1);
  const Δλ = toRadians(lon2 - lon1);

  const a =
    Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
    Math.cos(φ1) * Math.cos(φ2) *
    Math.sin(Δλ / 2) * Math.sin(Δλ / 2);

  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
};

type Props = {
  locations: Location[];
};

const LocationTracker: React.FC<Props> = ({ locations: initialLocations }) => {
  const [locations, setLocations] = useState<Location[]>(initialLocations);
  const [currentPosition, setCurrentPosition] = useState<GeolocationCoordinates | null>(null);

  useEffect(() => {
    const updateLocation = () => {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setCurrentPosition(position.coords);

          const updatedLocations = locations.map((loc) => {
            if (loc.status === 'visited') return loc;

            const distance = getDistanceInMeters(
              loc.latitude,
              loc.longitude,
              position.coords.latitude,
              position.coords.longitude
            );

            if (distance <= 5) {
              console.log(`You are within 5 meters of location ${loc.id}`);
              return { ...loc, status: 'visited' };
            }
            return loc;
          });

          setLocations(updatedLocations);
        },
        (error) => {
          console.error('Error getting location:', error);
        }
      );
    };

    updateLocation(); // Initial check
    const interval = setInterval(updateLocation, 5000);

    return () => clearInterval(interval);
  }, [locations]);

  return (
    <div>
      <h2>Location Tracker</h2>
      <ul>
        {locations.map((loc) => (
          <li key={loc.id}>
            ID: {loc.id} - Status: {loc.status}
          </li>
        ))}
      </ul>
      {currentPosition && (
        <p>
          Your location: Lat {currentPosition.latitude.toFixed(5)}, Long {currentPosition.longitude.toFixed(5)}
        </p>
      )}
    </div>
  );
};

export default LocationTracker;
-----------------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import LocationTracker from './LocationTracker';

const sampleLocations = [
  { id: '1', latitude: 37.7749, longitude: -122.4194, status: 'not visited' },
  { id: '2', latitude: 37.7750, longitude: -122.4195, status: 'not visited' },
];

const App = () => <LocationTracker locations={sampleLocations} />;

const root = ReactDOM.createRoot(document.getElementById('root')!);
root.render(<App />);

-----------------------------------
const Beats = require("./../models/BeatsModel");

const updateBeatStatusToMet = async (req, res) => {
    try {
        const { id } = req.params;

        if (!id) {
            return res.status(400).json({ success: false, message: "ID is required" });
        }

        const updatedBeat = await Beats.findByIdAndUpdate(
            id,
            { status: "Met", lastActivity: new Date() },
            { new: true } // returns the updated document
        );

        if (!updatedBeat) {
            return res.status(404).json({ success: false, message: "Beat record not found" });
        }

        res.status(200).json({
            success: true,
            message: "Status updated to 'Met'",
            data: updatedBeat
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({
            success: false,
            message: "Server error",
            error: err.message
        });
    }
};

router.put('/beats/:id/status-met', updateBeatStatusToMet);

